#nullable enable
//version 2022.4.25.615
using Microsoft.EntityFrameworkCore;
namespace Generated;




   {{ for classLoop in queries }}
   public partial class SearchData{{classLoop.Name}} {
        private {{nameContext}} context;
        public SearchData{{classLoop.Name}} ({{nameContext}} context) {
            this.context=context;
        }
        public IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}Find_AsyncEnumerable(Search{{classLoop.Name}}? search){
            return context.{{classLoop.Name}}Find_AsyncEnumerable(search);
        }
        public Task<{{classLoop.Name}}[]> {{classLoop.Name}}Find_Array( Search{{classLoop.Name}}? search){
            return  context.{{classLoop.Name}}Find_Array(search);
        }
        public Task<long> {{classLoop.Name}}Count( Search{{classLoop.Name}} search){
            return context.{{classLoop.Name}}Count(search);
        }

   }
   public class Search{{classLoop.Name}} :  Search<e{{classLoop.Name}}Columns,{{classLoop.Name}}>
    {
    
    public override IOrderedQueryable<{{classLoop.Name}}> TransformToOrder(IQueryable<{{classLoop.Name}}> data){
        if(OrderBys == null || OrderBys.Length ==0){
           //first item
           {{ for prop in classLoop.cols  limit:1 }}
                return data.OrderByDescending(it=>it.{{prop.Name}});
           {{ end }}
        }
        var order = OrderBys[0]!;
        
        IOrderedQueryable<{{classLoop.Name}}> ret;
        switch(order.FieldName){
        {{ for prop in classLoop.cols }}
            case e{{classLoop.Name}}Columns.{{prop.Name}}:
                if(order.Asc)
                    ret = data.OrderBy(it=>it.{{prop.Name}});
                else
                    ret = data.OrderByDescending(it=>it.{{prop.Name}});
                
                break;
        {{end}}
            default:
                throw new ArgumentException(" cannot order {{classLoop.Name}} by "+ order.FieldName);
            
        }
        for(var i=1;i<OrderBys.Length;i++){
            order=OrderBys[i];
            switch(order.FieldName){
        {{ for prop in classLoop.cols }}
            case e{{classLoop.Name}}Columns.{{prop.Name}}:
                if(order.Asc)
                    ret = ret.ThenBy(it=>it.{{prop.Name}});
                else
                    ret = ret.ThenByDescending(it=>it.{{prop.Name}});
                
                break;
        {{end}}
            default:
                throw new ArgumentException(" cannot order {{classLoop.Name}} by "+ order.FieldName);
            
        }
        }
        return ret;

        
    }


    public override  IQueryable<{{classLoop.Name}}> TransformToWhere(IQueryable<{{classLoop.Name}}> data){
        if(SearchFields == null || SearchFields.Length ==0)        
            return data;
        var returnValue = data;
        foreach(var s in SearchFields){
            switch(s.FieldName ){
                case e{{classLoop.Name}}Columns.None :
                    break;
{{ for prop in classLoop.cols }}
            {{ if !prop.TheTypeName 
                    continue
                end
            }}

    case e{{classLoop.Name}}Columns.{{prop.Name}}:
        //{{prop.TheTypeName}}
{{ 
hasLess = 0
hasString=0
hasDateTime=0
if "float" == prop.TheTypeName ||  "byte" == prop.TheTypeName || "string" == prop.TheTypeName || "short" == prop.TheTypeName || "int" == prop.TheTypeName || "long" == prop.TheTypeName  || "double" == prop.TheTypeName || "DateTime" == prop.TheTypeName || "System.DateTime" == prop.TheTypeName || "decimal" == prop.TheTypeName
    hasLess=1
end
if "float?" == prop.TheTypeName || "byte?" == prop.TheTypeName || "string?" == prop.TheTypeName || "short?" ==prop.TheTypeName || "int?" == prop.TheTypeName || "long?" == prop.TheTypeName  || "double?" == prop.TheTypeName ||"System.DateTime?" == prop.TheTypeName || "DateTime?" == prop.TheTypeName || "decimal?" == prop.TheTypeName
    hasLess=1
end
if "string" == prop.TheTypeName || "string?" == prop.TheTypeName
    hasString=1
end
if "DateTime" == prop.TheTypeName || "DateTime?" == prop.TheTypeName || "System.DateTime" == prop.TheTypeName || "System.DateTime?" == prop.TheTypeName
    hasDateTime=1
end
}}                                    
        if(s.Value == null)
        {
            {{ if prop.IsNullable || hasString == 1}}
                switch(s.Criteria){
                    case SearchCriteria.Equal:
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}==null);
                        break;
                    case SearchCriteria.Different:
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}!=null);
                        break;
                    default:
                        throw new ArgumentException($"null cannot have {(int)s.Criteria} {s.Criteria} for {s.FieldName}");
                    }
                
            
            {{ else }}
                throw new ArgumentException("{{classLoop.Name}}.{{prop.Name}} cannot be null");
            {{ end}}
        }
        else{
            {{ if "double" == prop.TheTypeName || "float" == prop.TheTypeName || prop.TheTypeName == "bool" || "byte" == prop.TheTypeName  || prop.TheTypeName == "short" || prop.TheTypeName == "long" || prop.TheTypeName == "int" || prop.TheTypeName == "decimal"}} 
                var valueArray = s.Value
                    .Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    .Select(it=>{{prop.TheTypeName}}.Parse(it))
                    .ToArray();
                var value = valueArray[0];
                
                ;
            {{ else if "double?" == prop.TheTypeName ||  "float?" == prop.TheTypeName || prop.TheTypeName == "bool?" ||  "byte?" == prop.TheTypeName  || prop.TheTypeName == "short?" || prop.TheTypeName == "long?" || prop.TheTypeName == "decimal?"|| prop.TheTypeName == "int?"  }} 
                {{prop.TheTypeName}} value= null;
                {{prop.TheTypeName  | string.remove "?" }}[] valueArray= null;
                if(s.Value != null){
                    valueArray = s.Value
                    .Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    .Select(it=>{{prop.TheTypeName  | string.remove "?" }}.Parse(it))
                    .ToArray();
                    value = valueArray[0];
                ;
                }
            {{ else if prop.TheTypeName == "string" || prop.TheTypeName == "string?" }}
                var value = s.Value;
                var valueArray= s.Value?.Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    .ToArray();

            {{ else if "DateTime" == prop.TheTypeName || "System.DateTime" == prop.TheTypeName }} 
                var valueArray=s.Value
                    .Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    .Select(it=>DateTime.Parse(it))
                    .ToArray();
                var value=valueArray[0]; 
                
            {{ else if "DateTime?" == prop.TheTypeName || "System.DateTime?" == prop.TheTypeName }} 
                {{prop.TheTypeName}} value= null;
                {{prop.TheTypeName  | string.remove "?" }}[] valueArray=null;
                if(s.Value != null){
                    valueArray=s.Value
                    .Split(",", StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                    .Select(it=>DateTime.Parse(it))
                    .ToArray();
                    value=valueArray[0]; 

                }
            
            {{ else }}
                var value =({{prop.TheTypeName}})((dynamic)s.Value);
                {{prop.TheTypeName}}[] valueArray=null;
            {{ end}}  
            
            switch(s.Criteria){
                  case SearchCriteria.Between:
                        {{ if prop.IsArray || hasLess != 1}} 
                            throw new ArgumentException("cannot contain array in array or property that is not fundamental ");
                        {{ else }}
                            if(valueArray.Length != 2){
                                throw new ArgumentException("between must have 2 args, separated by comma");
                            }
                            {{ if  hasString != 1  }}
                                returnValue =returnValue.Where(it=>it.{{prop.Name}}>= valueArray[0] && it.{{prop.Name}} <= valueArray[1]);
                            {{ else }}
                                returnValue =returnValue.Where(it=>String.Compare(it.{{prop.Name}},valueArray[0]) >= 0  && String.Compare(it.{{prop.Name}},valueArray[1]) <= 0);

                            {{ end }}
                        {{ end }}
                        break;
                  case SearchCriteria.NotBetween:
                        {{ if prop.IsArray || hasLess != 1}} 
                            throw new ArgumentException("cannot contain array in array or property that is not fundamental ");
                        {{ else }}
                            if(valueArray.Length != 2){
                                throw new ArgumentException("between must have 2 args, separated by comma");
                            }
                            {{ if  hasString != 1  }}
                                returnValue =returnValue.Where(it=>it.{{prop.Name}}< valueArray[0] || it.{{prop.Name}} > valueArray[1]);
                            {{ else }}
                                returnValue =returnValue.Where(it=>String.Compare(it.{{prop.Name}},valueArray[0]) < 0  || String.Compare(it.{{prop.Name}},valueArray[1]) > 0);

                            {{ end }}
                        {{ end }}
                        break;
                    case SearchCriteria.InArray:
                        {{ if prop.IsArray || hasLess != 1}} 
                            throw new ArgumentException("cannot contain array in array or property that is not fundamental ");
                        {{ else }}
                            //{{prop.TheTypeName}}
                            //{{prop.IsNullable}}
                            //{{hasString}}
                            {{if prop.IsNullable && hasString != 1  }}
                                returnValue =returnValue.Where(it=>valueArray.Contains(it.{{prop.Name}}.Value));
                            {{ else }}
                                returnValue =returnValue.Where(it=>valueArray.Contains(it.{{prop.Name}}));
                            {{end}}
                        {{ end }}
                        break;
                    case SearchCriteria.NotInArray:
                        {{ if prop.IsArray || hasLess != 1}} 
                            throw new ArgumentException("cannot contain array in array or property that is not fundamental ");
                        {{ else }}
                            
                            {{if prop.IsNullable && hasString != 1  }}
                                returnValue =returnValue.Where(it=>!valueArray.Contains(it.{{prop.Name}}.Value));
                            {{ else }}
                                returnValue =returnValue.Where(it=>!valueArray.Contains(it.{{prop.Name}}));
                            {{end}}
                        {{ end }}
                        break;
                    case SearchCriteria.Equal:
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}==value);
                        break;
                    case SearchCriteria.Different:
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}!=value);
                        break;
                    {{ if hasLess == 1 }}
                    case SearchCriteria.Less:
                        {{ if "string" == prop.TheTypeName || "string?" == prop.TheTypeName }}
                            returnValue =returnValue.Where(it=>String.Compare(it.{{prop.Name}},value) < 0 );
                        {{ else }}
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<value);
                        {{ end }}
                        break;
                    case SearchCriteria.LessOrEqual:
                        {{ if "string" == prop.TheTypeName || "string?" == prop.TheTypeName }}
                            returnValue =returnValue.Where(it=>String.Compare(it.{{prop.Name}},value) <= 0 );
                        {{ else }}
                        
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<=value);
                        {{end}}
                        break;
                    case SearchCriteria.Greater:
                        {{ if "string" == prop.TheTypeName || "string?" == prop.TheTypeName }}
                            returnValue =returnValue.Where(it=>String.Compare(it.{{prop.Name}},value) > 0 );
                        {{ else }}
                        
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>value);
                        {{end}}
                        break;
                    case SearchCriteria.GreaterOrEqual:
                    {{ if "string" == prop.TheTypeName || "string?" == prop.TheTypeName }}
                            returnValue =returnValue.Where(it=>String.Compare(it.{{prop.Name}},value) >= 0 );
                        {{ else }}
                        
                        
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=value);
                        {{end}}
                        break;
                    {{end}}
                    {{if hasString == 1}}
                    case SearchCriteria.Contains:
                        returnValue =returnValue.Where(it=>(it.{{prop.Name}}).Contains(value));
                        break;
                    case SearchCriteria.StartsWith:
                        returnValue =returnValue.Where(it=>(it.{{prop.Name}}).StartsWith(value));
                        break;
                    case SearchCriteria.EndsWith:
                        returnValue =returnValue.Where(it=>(it.{{prop.Name}}).EndsWith(value));
                        break;
                    /*case SearchCriteria.Contains:
                        returnValue =returnValue.Where(it=> it.{{prop.Name}}.Contains(value));
                        break;
                    */
                    {{end}}
                    {{if hasDateTime == 1}}
                    case SearchCriteria.EqualYear:
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffYear(it.{{prop.Name}},value) == 0);
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                        {{ else }}
                            var year=  value.Year;
                        {{ end }}
                        var yearStart=new DateTime(year,1,1);
                        var yearEnd=new DateTime(year+1,1,1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=yearStart && it.{{prop.Name}}<yearEnd);
                        }
                        break;
                    case SearchCriteria.DifferentYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                        {{ else }}
                            var year=  value.Year;
                        {{ end }}                        
                        //   returnValue =returnValue.Where(it=>EF.Functions.DateDiffYear(it.{{prop.Name}},value) != 0);
                        var yearStart=new DateTime(year,1,1);
                        var yearEnd=new DateTime(year+1,1,1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<yearStart || it.{{prop.Name}}>=yearEnd);
                      }
                      break;
                    case SearchCriteria.GreaterYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                        {{ else }}
                            var year=  value.Year;
                        {{ end }}                        
                        var yearEnd=new DateTime(year+1,1,1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=yearEnd);
                  
                        }
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffYear(value,it.{{prop.Name}}) > 0);
                        break;
                    case SearchCriteria.LessYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                        {{ else }}
                            var year=  value.Year;
                        {{ end }}                        
                        var yearStart=new DateTime(year,1,1).AddSeconds(-1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<=yearStart);
                        }
                        
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffYear(value,it.{{prop.Name}}) < 0);
                        break;
                    case SearchCriteria.GreaterOrEqualYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                        {{ else }}
                            var year=  value.Year;
                        {{ end }}                        
                        var yearEnd=new DateTime(year,1,1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=yearEnd);
                  
                        }
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffYear(value,it.{{prop.Name}}) >= 0);
                        break;
                    case SearchCriteria.LessOrEqualYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                        {{ else }}
                            var year=  value.Year;
                        {{ end }}                        
                        var yearStart=new DateTime(year+1,1,1).AddSeconds(-1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<=yearStart);
                        }
                        
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffYear(value,it.{{prop.Name}}) <= 0);
                        break;
                    case SearchCriteria.EqualMonthYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                            var month=  value.Value.Month;
                        {{ else }}
                            var year=  value.Year;
                            var month=  value.Month;
                        {{ end }}
                        var yearStart=new DateTime(year,month,1);
                        var yearEnd=new DateTime(year,month,1).AddMonths(1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=yearStart && it.{{prop.Name}}<yearEnd);
                        }
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffMonth(it.{{prop.Name}},value) == 0);
                        break;
                    case SearchCriteria.DifferentMonthYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                            var month=  value.Value.Month;
                        {{ else }}
                            var year=  value.Year;
                            var month=  value.Month;
                        {{ end }}
                        var yearStart=new DateTime(year,month,1);
                        var yearEnd=new DateTime(year,month,1).AddMonths(1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<yearStart || it.{{prop.Name}}>=yearEnd);
                        }
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffMonth(it.{{prop.Name}},value) != 0);
                        break;
                    case SearchCriteria.GreaterMonthYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                            var month=  value.Value.Month;
                        {{ else }}
                            var year=  value.Year;
                            var month=  value.Month;
                        {{ end }}
                        var yearStart=new DateTime(year,month,1).AddMonths(1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=yearStart );
                        }
                    
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffMonth(it.{{prop.Name}},value) > 0);
                        break;
                    case SearchCriteria.LessMonthYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                            var month=  value.Value.Month;
                        {{ else }}
                            var year=  value.Year;
                            var month=  value.Month;
                        {{ end }}
                        var yearStart=new DateTime(year,month,1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<yearStart );
                        }
                    
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffMonth(it.{{prop.Name}},value) < 0);
                        break;
                    case SearchCriteria.GreaterOrEqualMonthYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                            var month=  value.Value.Month;
                        {{ else }}
                            var year=  value.Year;
                            var month=  value.Month;
                        {{ end }}
                        var yearStart=new DateTime(year,month,1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}>=yearStart );
                        }
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffMonth(it.{{prop.Name}},value) >= 0);
                        break;
                    case SearchCriteria.LessOrEqualMonthYear:
                        {
                        {{ if prop.IsNullable}}
                            var year=  value.Value.Year;
                            var month=  value.Value.Month;
                        {{ else }}
                            var year=  value.Year;
                            var month=  value.Month;
                        {{ end }}
                        var yearStart=new DateTime(year,month,1).AddMonths(1).AddSeconds(-1);
                        returnValue =returnValue.Where(it=>it.{{prop.Name}}<=yearStart );
                        }
                    
                        //returnValue =returnValue.Where(it=>EF.Functions.DateDiffMonth(it.{{prop.Name}},value) <= 0);
                        break;
   
                    {{end}}
                    default:
                        throw new ArgumentException($"not found Criteria {(int)s.Criteria} {s.Criteria} for {s.FieldName}");
                }
            
        }
        break;
{{ end }}

                default:
                    throw new ArgumentException("{{classLoop.Name}} has not column "+s.FieldName);
            }
        }
        return returnValue;
    }

}


   {{ end }}
     
public partial class {{nameContext}}
{
    
    {{ for classLoop in queries }}
    // {{query}}  
    {{ if classLoop.numberKeys == 1  }}
    //has a single id
    public  Task<{{classLoop.Name}}> {{classLoop.Name}}GetSingle({{classLoop.firstKey.TheTypeName}} {{ classLoop.firstKey.Name}}){
        return 
            this.{{classLoop.Name}}
                .Where(it=>it.{{ classLoop.firstKey.Name}} == {{ classLoop.firstKey.Name}})
                .FirstOrDefaultAsync();
    }
    public  async Task<bool> {{classLoop.Name}}Delete({{classLoop.firstKey.TheTypeName}} {{ classLoop.firstKey.Name}}){
        var item = await {{classLoop.Name}}GetSingle({{ classLoop.firstKey.Name}});
        if(item == null)
            return false;
       this.{{classLoop.Name}}.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> {{classLoop.Name}}Modify({{classLoop.Name}} val ){
        var item = await {{classLoop.Name}}GetSingle(val.{{ classLoop.firstKey.Name}});
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        return true; 
    }
    {{else}}
    //generate just for keys 1, not for {{numberKeys}}
    {{ end }}
    public async  Task<{{classLoop.Name}}> {{classLoop.Name}}Save({{classLoop.Name}} val){
        
        var data= await {{classLoop.Name}}SaveMultiple(val);
        if(data == null)
            return null;

        return data[0];
                
    }
    public async  Task<{{classLoop.Name}}[]> {{classLoop.Name}}SaveMultiple(params {{classLoop.Name}}[] values){
        
        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.{{classLoop.Name}}.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }
    
    public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}GetAll(){
        
        return this.{{classLoop.Name}}Find_AsyncEnumerable(null);
    }
    public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}SimpleSearch(SearchCriteria sc, e{{classLoop.Name}}Columns colToSearch, string value){
        var search = new Search{{classLoop.Name}}();
        var orderBy = new Generated.OrderBy<e{{classLoop.Name}}Columns>();
        orderBy.FieldName = colToSearch;
        orderBy.Asc = true;
        search.OrderBys = new[] { orderBy };
        search.PageNumber = 1;
        search.PageSize = int.MaxValue;
        var s = new SearchField<e{{classLoop.Name}}Columns>();
        s.Criteria = sc;
        s.FieldName = colToSearch;
        s.Value = value;
        search.SearchFields = new[] { s };
        var data = this.{{classLoop.Name}}Find_AsyncEnumerable(search);
        return data;
    }   

    //andrei
    {{ for col in classLoop.cols}}
     {{if col.TheTypeName}}
     public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}SimpleSearch_{{col.Name}}(SearchCriteria sc,  {{col.TheTypeName}} value){
        
        return {{classLoop.Name}}SimpleSearch(sc,e{{classLoop.Name}}Columns.{{col.Name}},value.ToString());
        
    }
    public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}SimpleSearchNull_{{col.Name}}(SearchCriteria sc){
        
        return {{classLoop.Name}}SimpleSearch(sc,e{{classLoop.Name}}Columns.{{col.Name}},null);
        
    }
    {{end}}
    {{ end}}


    public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}SimpleSearch(SearchField<e{{classLoop.Name}}Columns> search){
        var s=new Search{{classLoop.Name}}();
         s.SearchFields = new SearchField<e{{classLoop.Name}}Columns>[1];
         s.SearchFields[0] = search;
        return this.{{classLoop.Name}}Find_AsyncEnumerable(s);
    }
    public IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}Find_AsyncEnumerable(Search{{classLoop.Name}}? search){
        
        IQueryable<{{classLoop.Name}}> data= this.{{classLoop.Name}} ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        var ret= search.TransformToOrder(data).Skip((search.PageNumber-1)*search.PageSize).Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
    public Task<{{classLoop.Name}}[]> {{classLoop.Name}}Find_Array( Search{{classLoop.Name}}? search){
        IQueryable<{{classLoop.Name}}> data= this.{{classLoop.Name}} ;
        if(search == null){
            return data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        var ret= search.TransformToOrder(data).Skip((search.PageNumber-1)*search.PageSize).Take(search.PageSize);
        return ret.ToArrayAsync();
    }
    public Task<long> {{classLoop.Name}}Count( Search{{classLoop.Name}} search){
        
        IQueryable<{{classLoop.Name}}> data= this.{{classLoop.Name}} ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    {{ end }}
    
}

    
#nullable restore