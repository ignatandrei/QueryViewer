#nullable enable
using Microsoft.EntityFrameworkCore;
namespace Generated;
   {{ for classLoop in queries }}
   public partial class SearchData{{classLoop.Name}} {
        private {{nameContext}} context;
        public SearchData{{classLoop.Name}} ({{nameContext}} context) {
            this.context=context;
        }
        public IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}Find_AsyncEnumerable(Search{{classLoop.Name}}? search){
            return context.{{classLoop.Name}}Find_AsyncEnumerable(search);
        }
        public Task<{{classLoop.Name}}[]> {{classLoop.Name}}Find_Array( Search{{classLoop.Name}}? search){
            return  context.{{classLoop.Name}}Find_Array(search);
        }
        public Task<long> {{classLoop.Name}}Count( Search{{classLoop.Name}} search){
            return context.{{classLoop.Name}}Count(search);
        }

   }

   {{ end }}
     
public partial class {{nameContext}}
{
    
    {{ for classLoop in queries }}
    // {{query}}  
    {{ if classLoop.numberKeys == 1  }}
    //has a single id
    public  Task<{{classLoop.Name}}> {{classLoop.Name}}GetSingle({{classLoop.firstKey.TypeName}} {{ classLoop.firstKey.Name}}){
        return 
            this.{{classLoop.Name}}
                .Where(it=>it.{{ classLoop.firstKey.Name}} == {{ classLoop.firstKey.Name}})
                .FirstOrDefaultAsync();
    }
    public  async Task<bool> {{classLoop.Name}}Delete({{classLoop.firstKey.TypeName}} {{ classLoop.firstKey.Name}}){
        var item = await {{classLoop.Name}}GetSingle({{ classLoop.firstKey.Name}});
        if(item == null)
            return false;
       this.{{classLoop.Name}}.Remove(item);
        await this.SaveChangesAsync();
        return true; 
    }
    public  async Task<bool> {{classLoop.Name}}Save({{classLoop.Name}} val ){
        var item = await {{classLoop.Name}}GetSingle(val.{{ classLoop.firstKey.Name}});
        if(item == null)
            return false;
        item.CopyFrom(val);        
        await this.SaveChangesAsync();
        return true; 
    }
    {{else}}
    //generate just for keys 1, not for {{numberKeys}}
    {{ end }}

    public async  Task<{{classLoop.Name}}[]> {{classLoop.Name}}SaveInBD(params {{classLoop.Name}}[] values){
        
        if(values == null)
            return null;
        if(values.Length == 0)
            return values;
        foreach(var value in values){
            this.{{classLoop.Name}}.Add(value);
        }
        await SaveChangesAsync();
        return values;

                
    }
    
    public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}GetAll(){
        
        return this.{{classLoop.Name}}Find_AsyncEnumerable(null);
    }

    public  IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}SimpleSearch(SearchField<e{{classLoop.Name}}Columns> search){
        var s=new Search{{classLoop.Name}}();
         s.SearchFields = new SearchField<e{{classLoop.Name}}Columns>[1];
         s.SearchFields[0] = search;
        return this.{{classLoop.Name}}Find_AsyncEnumerable(s);
    }
    public IAsyncEnumerable<{{classLoop.Name}}> {{classLoop.Name}}Find_AsyncEnumerable(Search{{classLoop.Name}}? search){
        
        IQueryable<{{classLoop.Name}}> data= this.{{classLoop.Name}} ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        var ret= search.TransformToOrder(data).Skip((search.PageNumber-1)*search.PageSize).Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
    public Task<{{classLoop.Name}}[]> {{classLoop.Name}}Find_Array( Search{{classLoop.Name}}? search){
        IQueryable<{{classLoop.Name}}> data= this.{{classLoop.Name}} ;
        if(search == null){
            return data.ToArrayAsync();
        }
        data = search.TransformToWhere(data);        
        var ret= search.TransformToOrder(data).Skip((search.PageNumber-1)*search.PageSize).Take(search.PageSize);
        return ret.ToArrayAsync();
    }
    public Task<long> {{classLoop.Name}}Count( Search{{classLoop.Name}} search){
        
        IQueryable<{{classLoop.Name}}> data= this.{{classLoop.Name}} ;
        if(search != null){
            data = search.TransformToWhere(data);        
        }        
        return data.LongCountAsync();
    }
    {{ end }}
    
}

    
#nullable restore