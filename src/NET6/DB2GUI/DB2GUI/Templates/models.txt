//version 2023.12.9.2128
#nullable enable
using Microsoft.EntityFrameworkCore;
namespace Generated;
{{ for classLoop in classes }}
public interface I_{{classLoop.Name}}_Table {
    {{ for prop in classLoop.Props }}
            {{ if prop.RawKindType == "PredefinedType" || prop.RawKindType == "NullableType"}}
            {{prop.Type}} {{prop.Name}} {get;set;}
            {{ end }}
     {{ end }}
}

public partial class {{classLoop.Name}}_Table: I_{{classLoop.Name}}_Table  {
    {{ for prop in classLoop.Props }}
            {{ if prop.RawKindType == "PredefinedType" || prop.RawKindType == "NullableType"}}
            public {{prop.Type}} {{prop.Name}} {get;set;}
            {{ end }}
     {{ end }}
     public void CopyFrom(I_{{classLoop.Name}}_Table other)  {
        //using var _= NetTilt.Models.Models.StartMethod("{{classLoop.Name}}_Table","CopyFrom");
        {{ for prop in classLoop.Props }}
            {{ if prop.RawKindType == "PredefinedType" || prop.RawKindType == "NullableType"}}           
           this.{{prop.Name}} = other.{{prop.Name}};
           {{end}}
        {{ end }}
    }
     public static implicit operator {{classLoop.Name}}_Table({{classLoop.Name}} obj) { 
        //using var _= NetTilt.Models.Models.StartMethod("{{classLoop.Name}}_Table","operatorTable");
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new {{classLoop.Name}}_Table();
         ret.CopyFrom(obj as I_{{classLoop.Name}}_Table );
         return ret;
     }
     public static implicit operator {{classLoop.Name}}({{classLoop.Name}}_Table obj) { 
     //using var _= NetTilt.Models.Models.StartMethod("{{classLoop.Name}}_Table","operator");
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new {{classLoop.Name}}();
         ret.CopyFrom(obj as I_{{classLoop.Name}}_Table) ;
         return ret;
     }
}


public partial class {{classLoop.Name}} : I_{{classLoop.Name}}_Table {
    public void CopyFrom({{classLoop.Name}} other)  {
    //using var _= NetTilt.Models.Models.StartMethod("{{classLoop.Name}}","CopyFromClass");
        {{ for prop in classLoop.Props }}
            this.{{prop.Name}} = other.{{prop.Name}};
        {{ end }}
    }
    public void CopyFrom(I_{{classLoop.Name}}_Table other)  {
    //using var _= NetTilt.Models.Models.StartMethod("{{classLoop.Name}}","CopyFromTable");
        {{ for prop in classLoop.Props }}
            {{ if prop.RawKindType == "PredefinedType" || prop.RawKindType == "NullableType"}}           
           this.{{prop.Name}} = other.{{prop.Name}};
           {{end}}
        {{ end }}
    }
}

//for {{classLoop.Name}} : props: {{classLoop.Props}} 
public enum e{{classLoop.Name}}Columns {
    None = 0
{{ for prop in classLoop.Props }}
    ,{{prop.Name}}
{{ end }}
}



{{ end }}


#nullable restore