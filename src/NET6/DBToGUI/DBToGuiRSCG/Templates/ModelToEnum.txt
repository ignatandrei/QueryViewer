namespace Generated;
{{ for classLoop in classes }}
//for {{classLoop.Name}} : props: {{classLoop.Props}} 
public enum e{{classLoop.Name}}Columns {
    None = 0
{{ for prop in classLoop.Props }}
    ,{{prop}}
{{ end }}
}
public class Search{{classLoop.Name}} :  Search<e{{classLoop.Name}}Columns,{{classLoop.Name}}>
{

    public override  IQueryable<{{classLoop.Name}}> TransformToWhere(IQueryable<{{classLoop.Name}}> data){
        if((SearchFields?.Length ??0)==0)        
            return data;
        foreach(var sf in SearchFields){
            switch(sf.FieldName ){
                case e{{classLoop.Name}}Columns.None :
                    break;
{{ for prop in classLoop.Props }}
    case e{{classLoop.Name}}Columns.{{prop}}:
        break;
{{ end }}

                default:
                    throw new ArgumentException("{{classLoop.Name}} has not column "+sf.FieldName);
            }
        }
        return data;
    }
}
/*
public class OrderBy{{classLoop.Name}} :  OrderBy<e{{classLoop.Name}}Columns>
{
}

public class SearchField{{classLoop.Name}} :  SearchField<e{{classLoop.Name}}Columns>
{
}
*/
{{ end }}

public class OrderBy<TColumn>
    where TColumn : System.Enum
{
    public TColumn FieldName { get; set; }
    public bool Asc { get; set; }
}
public class SearchField<TColumn>
    where TColumn : System.Enum
{
    public TColumn FieldName { get; set; }        
    public string? Value { get; set; }
    public SearchCriteria Criteria { get; set; }
         
    public string? CriteriaString { get; set; }

}
public abstract class Search<TColumn, TClass>
    where TColumn : System.Enum
    where TClass: class
{
    public Search(){
        PageSize=10;
        PageNumber=1;
    }
    public SearchField<TColumn>[] SearchFields { get; set; }
    public OrderBy<TColumn>[] OrderBys { get; set; }
    public int PageSize{get;set;}
    public int PageNumber{get;set;}
    public abstract IQueryable<TClass> TransformToWhere(IQueryable<TClass> data);
    
}

public enum SearchCriteria
{
    None = 0,
    StartsWith,
    EndsWith,
    Contains,
    Equal,
    Different,
    Greater,
    Less,
    GreaterOrEqual,
    LessOrEqual
}
