
namespace Generated;
    
public partial class {{nameContext}}
{
    {{ for classLoop in queries }}
    // {{query}}    
    public IAsyncEnumerable<{{classLoop}}> {{classLoop}}FindAsync(Search{{classLoop}}? search){
        
        IQueryable<{{classLoop}}> data= this.{{classLoop}} ;
        if(search == null){
            return data.AsAsyncEnumerable();
        }
        data = search.TransformToWhere(data);        
        var ret= search.TransformToOrder(data).Skip((search.PageNumber-1)*search.PageSize).Take(search.PageSize);
        return ret.AsAsyncEnumerable();
    }
    public Task<{{classLoop}}[]> {{classLoop}}Find( Search{{classLoop}} search){
        IQueryable<{{classLoop}}> data= this.{{classLoop}} ;
        data = search.TransformToWhere(data);        
        var ret= search.TransformToOrder(data).Skip((search.PageNumber-1)*search.PageSize).Take(search.PageSize);
        return ret.ToArrayAsync();
    }
    public Task<long> {{classLoop}}FindNumber( Search{{classLoop}} search){
        IQueryable<{{classLoop}}> data= this.{{classLoop}} ;
        data = search.TransformToWhere(data);        
        return data.LongCountAsync();
    }
    {{ end }}
    
}

    