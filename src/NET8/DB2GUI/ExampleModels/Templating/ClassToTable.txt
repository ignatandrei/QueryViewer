//autogenerated by RSCG_Templating version {{data.Version}} from file {{fileName}}
namespace {{data.nameSpace}} {
partial class {{data.className}} {
	     public void CopyFrom(I_{{data.className}}_Table other)  {


		{{ 
			for prop in data.properties 
			  isPublicGet = (prop.GetAccesibility == 6)
			  isPublicSet = (prop.SetAccesibility == 6)
			  isPublic = (isPublicGet || isPublicSet)
			  if ! isPublic 
				continue
			  end
			  if prop.IsInterface
				continue
			  end
			  if prop.IsClass
				if ! prop.IsString
					continue
				end
			  end

			  $getSet = "{" 
			  if isPublicGet 
				$getSet+="get;" 
			  end
			  if isPublicSet 
				$getSet+="set;" 
			  end
			  $getSet += "}" 
		}}
		//{{prop.IsString}} {{prop.IsClass}} {{prop.IsInterface}} {{prop.IsArray}}
		//{{prop.PropertyType}} {{prop.PropertyName}} {{isPublicGet}} {{isPublicSet}} {{isPublic}}
		this.{{prop.PropertyName}} = other.{{prop.PropertyName}};
		{{ end }}
		}//end copy from
 }


	partial class {{data.className}}_Table {
	
		{{ 
			for prop in data.properties 
			  isPublicGet = (prop.GetAccesibility == 6)
			  isPublicSet = (prop.SetAccesibility == 6)
			  isPublic = (isPublicGet || isPublicSet)
			  if ! isPublic 
				continue
			  end
			  if prop.IsInterface
				continue
			  end
			  if prop.IsClass
				if ! prop.IsString
					continue
				end
			  end

			  $getSet = "{" 
			  if isPublicGet 
				$getSet+="get;" 
			  end
			  if isPublicSet 
				$getSet+="set;" 
			  end
			  $getSet += "}" 
		}}
		//{{prop.IsString}} {{prop.IsClass}} {{prop.IsInterface}} {{prop.IsArray}}
		//{{prop.PropertyType}} {{prop.PropertyName}} {{isPublicGet}} {{isPublicSet}} {{isPublic}}
		// public {{prop.PropertyType}} {{prop.PropertyName}} {{$getSet}}
		{{ end }}

		public static explicit operator {{data.className}}_Table?({{data.className}} obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new {{data.className}}_Table();
         ret.CopyFrom(obj as I_{{data.className}}_Table );
         return ret;
     }
     public static explicit operator {{data.className}}?({{data.className}}_Table obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new {{data.className}}();
         ret.CopyFrom(obj as I_{{data.className}}_Table) ;
         return ret;
     }
public void CopyFrom(I_{{data.className}}_Table other)  {
        {{ 
			for prop in data.properties 
			if prop.IsInterface
				continue
			  end
			  if prop.IsClass
				if ! prop.IsString
					continue
				end
			  end

		}}
			this.{{prop.PropertyName}} = other.{{prop.PropertyName}};
		{{ end }}
}

	}//end clss
	

}//end namespace