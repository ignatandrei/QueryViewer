@page "/databases/{database}/tables"
@inject WebAPIInteraction interaction

<h1>Tables</h1>


    @if (tables == null)
{
    <p><em>Loading...</em></p>
}
else
{
    int i= 0;
    foreach (var t in tables.Keys)
    {
        var nr= ++i;
        var c = t;
        var data = $"databases/{database}/tables/{c}";
        <NavLink class="nav-link" href="@data">
            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span>@(nr)) @c 
        </NavLink>
        @(tables[c] == null ? "" : tables[c].ToString() + " rows")
        <br />
    }
}



@code {
    [Parameter]
    public string? database { get; set; } = null;

    [Inject(Key = "db")]
    public HttpClient? HttpClient_WebApi { get; set; } = null;

    public Dictionary<string,int?>? tables = null;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpClient_WebApi);

        var data = await HttpClient_WebApi.GetFromJsonAsync<string[]>($"api/MetaData/TableNames/{database}");
        if (data != null)
        {
            tables = data.OrderBy(a => a).ToDictionary(a => a, a => (int?)null);
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (database == null || tables == null || tables.Count == 0)
            return;
        var tasks = tables.Keys
            .Select(it => interaction.GetTableCount(database, it).AddData(it))
            .ToArray();
        await Task.WhenAll(tasks);
        foreach (var t in tasks)
        {
            if(t.IsCompletedSuccessfully)
                tables[t.Result.data] = t.Result.res;
        }
                
        await InvokeAsync(StateHasChanged);
        
        await base.OnAfterRenderAsync(firstRender);
    }
}
