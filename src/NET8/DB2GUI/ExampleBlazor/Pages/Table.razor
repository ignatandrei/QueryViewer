@page "/databases/{database}/tables/{table}"
@inherits LayoutComponentBase

Table <h3>@table</h3> in Database <i>@database</i>
Number records: @nrRecords
@if (columns == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div>
        
        <FluentDataGrid Items="@columns">
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.IsPk)" Sortable="true" />
            <PropertyColumn Property="@(p => p.IsNullable)"  Sortable="true" />
            <PropertyColumn Property="@(p => p.TypeJS)"  Sortable="true" />
        </FluentDataGrid>
    </div>

    <button @onclick="LoadData">
        LoadData
    </button>

}


@code {
    [Parameter]
    public string? database { get; set; } = null;

    [Parameter]
    public string? table { get; set; } = null;

    public int? nrRecords { get; set; } = null;
    [Inject(Key = "db")]
    public HttpClient? HttpClient_WebApi { get; set; } = null;


    FluentGrid? myGrid;

    public IQueryable<MetaColumn>? columns = null;
    private void LoadData()
    {

    }
    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpClient_WebApi);
        nrRecords = await HttpClient_WebApi.GetFromJsonAsync<int>($"api/AdvancedSearch_{database}_{table}/GetAllCount");

        var data = await HttpClient_WebApi.GetFromJsonAsync<MetaColumn[]>($"api/MetaData/Columns/{database}/{table}");
        if (data != null)
        {
            columns = data.AsQueryable();
        }


    }
}
