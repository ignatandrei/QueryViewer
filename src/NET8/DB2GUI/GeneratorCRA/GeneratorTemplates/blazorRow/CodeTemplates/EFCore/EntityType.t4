<#@ template hostSpecific="true" #>
<#@ output extension="_row.razor" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
        //modified 2023.12.15
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();
    var key = EntityType.FindPrimaryKey();
    var EntityhasOneKey = (key != null && key.Properties != null && key.Properties.Count ==1);
   
    string nameTable= EntityType.Name;
    if(!EntityhasOneKey) return (nameTable + " has not ONE PK") ;
    var lambda= code.Lambda(key.Properties, "e") ;
    var dot=lambda.IndexOf(".");
    var namePK=lambda.Substring(dot);
    var keyType=code.Reference(key.GetKeyType());   
    var properties = EntityType.GetProperties().ToArray();

     var fieldsNavig = new List<(string nameNavig,string nameEntityNavig,string keyType,string nameProp)>();
    foreach (var navigation in EntityType.GetNavigations())
    {
         if (navigation.IsCollection)
            continue;
        var targetTypeNavig = navigation.TargetEntityType.Name;
        var navigationName= navigation.Name;
        var keyNavig = navigation.TargetEntityType.FindPrimaryKey();
        var hasOneKeynavig = (keyNavig != null && keyNavig.Properties != null && keyNavig.Properties.Count ==1);
        
        if(hasOneKeynavig){
            var pk=keyNavig.Properties[0].FindContainingPrimaryKey() ;   
            var keyTypeNavig=code.Reference(pk.GetKeyType());   
            //var inv= navigation.Inverse;
            //if(inv==null) continue;
            var nameProp= navigation.ForeignKey.Properties[0].Name;

            fieldsNavig.Add((navigationName,targetTypeNavig,keyTypeNavig,nameProp));            
        }
            
    }

    
#>
@using global::Generated
@inject NavigationManager navigationManager
@if (TheRow == null)
{
    <p><em>Loading @table row with ID = @rowId</em></p>
}
else
{
<FluentStack Orientation="Orientation.Vertical"
                
                 VerticalGap="20"
                 >
    <# foreach(var prop in properties){ 
      var isNavig = fieldsNavig.Any(it=>it.nameProp==prop.Name);
    #>
    
    <# if(isNavig){ 
        var navigData= fieldsNavig.First(it=>it.nameProp==prop.Name);
    #>
    <FluentButton OnClick='()=>GotoTableRow("<#=navigData.nameEntityNavig #>",TheRow.<#=prop.Name#>.ToString())'><#=navigData.nameEntityNavig #> : @TheRow.<#=prop.Name#></FluentButton>
    <# }else{ #>
    <span class="demopanel">	<#=prop.Name#> :@TheRow.<#=prop.Name#> </span>    
    <# } #>

<# }//foreach prop
#>
    
</FluentStack>

}

@code {
    [Inject(Key = "db")]
    public HttpClient? HttpClient_WebApi { get; set; } = null;

    [Parameter]
    public string? database { get; set; } = null;

    [Parameter]
    public string? table { get; set; } = null;

    [Parameter]
    public string? rowId { get; set; } = null;

    public <#= nameTable #>? TheRow { get; set; } = null;

    private void GotoTableRow(string table, string rowId)
    {
        navigationManager.NavigateTo(string.Format("databases/{0}/tables/{1}/rows/{2}", database, table, rowId),true);
        
    }

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpClient_WebApi);
        ArgumentNullException.ThrowIfNull(database);
        ArgumentNullException.ThrowIfNull(table);
        ArgumentNullException.ThrowIfNull(rowId);
        var url = $"api/AdvancedSearch_{database}_{table}/GetSingle?id={rowId}";
        TheRow = await HttpClient_WebApi.GetFromJsonAsync<<#=nameTable#>>(url);
        await base.OnInitializedAsync();
    }
}
