@page "/databases/{database}/tables/{table}"
@using Microsoft.AspNetCore.Components.QuickGrid
@inherits LayoutComponentBase

Table <h3>@table</h3> in Database <i>@database</i>

@if (columns == null)
{
    <p><em>Loading...</em></p>
}
else
{
  
    <div class="table-responsive">
        <QuickGrid Items="@columns" Virtualize="true" class="table table-striped table-bordered" @ref="myGrid">
            <PropertyColumn Property="@(p => p.Name)" Sortable="true"  />
            <PropertyColumn Property="@(p => p.IsPk)" Sortable="true"  />
            <PropertyColumn Property="@(p => p.IsNullable)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Type)" Sortable="true"  />
            <PropertyColumn Property="@(p => p.TypeJS)" Sortable="true"  />
        </QuickGrid>
    </div>
    <button @onclick="LoadData">
        LoadData
    </button>
    
}


@code {
    [Parameter]
    public string? database { get; set; } = null;

    [Parameter]
    public string? table { get; set; } = null;


    [Inject(Key = "db")]
    public HttpClient? HttpClient_WebApi { get; set; } = null;

    QuickGrid<MetaColumn>? myGrid;

    public IQueryable<MetaColumn>? columns = null;
    private void LoadData()
    {
        
    }
    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(HttpClient_WebApi);

        var data = await HttpClient_WebApi.GetFromJsonAsync<MetaColumn[]>($"api/MetaData/Columns/{database}/{table}");
        if (data != null)
        {
            columns = data.AsQueryable();
            
            //await myGrid?.RefreshDataAsync();

            //await Task.Delay(20_000);
          
        }
       

    }
}
