<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "System",
        "System.Collections.Generic"
    };

    if (Options.UseDataAnnotations)
    {
        usings.Add("System.ComponentModel.DataAnnotations");
        usings.Add("System.ComponentModel.DataAnnotations.Schema");
        usings.Add("Microsoft.EntityFrameworkCore");
        usings.Add("GeneratorFromDB");
    }

    if (!string.IsNullOrEmpty(NamespaceHint))
    {
#>
namespace <#= NamespaceHint #>;

//ADDED by code generator
public interface I_<#= EntityType.Name #>_Table 
{
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        #>
        <#= code.Reference(property.ClrType) #><#= needsNullable ? "?" : "" #> <#= property.Name #> { get; set; }
        <#
    } // foreach property 
#>
}

public class <#= EntityType.Name #>_Table : I_<#= EntityType.Name #>_Table
{
    public static MetaTable metaData = new("<#= EntityType.Name #>");
    static <#= EntityType.Name #>_Table (){
        MetaColumn mc=null;
<#
    var key = EntityType.FindPrimaryKey();
    var hasOneKey = (key != null && key.Properties != null && key.Properties.Count ==1);
    var namePK="";
    if(hasOneKey){
            var lambda= code.Lambda(key.Properties, "e") ;
            var dot=lambda.IndexOf(".");
            namePK=lambda.Substring(dot+1);
    }
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var isNullable = property.IsNullable && !property.ClrType.IsValueType;
        var clrType=code.Reference(property.ClrType);
        var tv= GetJsTypeAndDefaultValue(clrType,isNullable);
        var jsType= tv.Item1;
        var defVal=tv.Item2;
        
        
#>
        mc=new ("<#= property.Name #>","<#=code.Reference(property.ClrType)#>",<#=property.IsNullable?"true":"false" #>);                
        mc.IsPk = <#= (namePK == property.Name ?"true":"false") #> ;
        mc.TypeJS = "<#= jsType #>";
        metaData.AddColumn(mc);
<#
    }
#> //done with foreach property in static constructor
    }
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        #>
        public <#= code.Reference(property.ClrType) #><#= needsNullable ? "?" : "" #> <#= property.Name #> { get; set; }
        <#
    } // foreach property 
#>
     public void CopyFrom(I_<#= EntityType.Name #>_Table other)  {
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        #>
        this.<#= property.Name #> = other.<#= property.Name #>;
        <#
    } // foreach property 
#>
    }

    public static explicit operator <#= EntityType.Name #>_Table?(<#= EntityType.Name #> obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new <#= EntityType.Name #>_Table();
         ret.CopyFrom(obj as I_<#= EntityType.Name #>_Table );
         return ret;
     }
     public static explicit operator <#= EntityType.Name #>?(<#= EntityType.Name #>_Table obj) { 
        if(obj == null)
            return null;
            //System.Diagnostics.Debugger.Break();
         var ret= new <#= EntityType.Name #>();
         ret.CopyFrom(obj as I_<#= EntityType.Name #>_Table) ;
         return ret;
     }



}
public partial class <#= EntityType.Name #> : I_<#= EntityType.Name #>_Table
{
     public void CopyFrom(I_<#= EntityType.Name #>_Table other)  {
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        #>
        this.<#= property.Name #> = other.<#= property.Name #>;
        <#
    } // foreach property 
#>
    }

}

//for <#= EntityType.Name #> 
public enum e<#= EntityType.Name #>Columns {
    None = 0
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        #>
        ,<#= property.Name #> 
        <#
    } // foreach property 
#>
}

//finish ADDED by code generator

<#
    }

    if (!string.IsNullOrEmpty(EntityType.GetComment()))
    {
#>
/// <summary>
/// <#= code.XmlComment(EntityType.GetComment()) #>
/// </summary>
<#
    }

    if (Options.UseDataAnnotations)
    {
        foreach (var dataAnnotation in EntityType.GetDataAnnotations(annotationCodeGenerator))
        {
#>
<#= code.Fragment(dataAnnotation) #>
<#
        }
    }
#>

public partial class <#= EntityType.Name #>
{
<#
    var firstProperty = true;
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        if (!firstProperty)
        {
            WriteLine("");
        }

        if (!string.IsNullOrEmpty(property.GetComment()))
        {
#>
    /// <summary>
    /// <#= code.XmlComment(property.GetComment(), indent: 1) #>
    /// </summary>
<#
        }

        if (Options.UseDataAnnotations)
        {
            var dataAnnotations = property.GetDataAnnotations(annotationCodeGenerator)
                .Where(a => !(a.Type == typeof(RequiredAttribute) && Options.UseNullableReferenceTypes && !property.ClrType.IsValueType));
            foreach (var dataAnnotation in dataAnnotations)
            {
#>
    <#= code.Fragment(dataAnnotation) #>
<#
            }
        }

        usings.AddRange(code.GetRequiredUsings(property.ClrType));

        var needsNullable = Options.UseNullableReferenceTypes && property.IsNullable && !property.ClrType.IsValueType;
        var needsInitializer = Options.UseNullableReferenceTypes && !property.IsNullable && !property.ClrType.IsValueType;
#>
    public <#= code.Reference(property.ClrType) #><#= needsNullable ? "?" : "" #> <#= property.Name #> { get; set; }<#= needsInitializer ? " = null!;" : "" #>
<#
        firstProperty = false;
    }

    foreach (var navigation in EntityType.GetNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in navigation.GetDataAnnotations(annotationCodeGenerator))
            {
#>
    <#= code.Fragment(dataAnnotation) #>
<#
            }
        }

        var targetType = navigation.TargetEntityType.Name;
        if (navigation.IsCollection)
        {
#>
    public virtual ICollection<<#= targetType #>> <#= navigation.Name #> { get; } = new List<<#= targetType #>>();
<#
        }
        else
        {
            var needsNullable = Options.UseNullableReferenceTypes && !(navigation.ForeignKey.IsRequired && navigation.IsOnDependent);
            var needsInitializer = Options.UseNullableReferenceTypes && navigation.ForeignKey.IsRequired && navigation.IsOnDependent;
#>
    public virtual <#= targetType #><#= needsNullable ? "?" : "" #> <#= navigation.Name #> { get; set; }<#= needsInitializer ? " = null!;" : "" #>
<#
        }
    }

    foreach (var skipNavigation in EntityType.GetSkipNavigations())
    {
        WriteLine("");

        if (Options.UseDataAnnotations)
        {
            foreach (var dataAnnotation in skipNavigation.GetDataAnnotations(annotationCodeGenerator))
            {
#>
    <#= code.Fragment(dataAnnotation) #>
<#
            }
        }
#>
    public virtual ICollection<<#= skipNavigation.TargetEntityType.Name #>> <#= skipNavigation.Name #> { get; } = new List<<#= skipNavigation.TargetEntityType.Name #>>();
<#
    }
#>
}
<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();
    WriteLine("//this was autogenerated by a tool. Do not modify! Use partial");
    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
using <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>


<#+

private System.Tuple<string,string> GetJsTypeAndDefaultValue(string clrType,bool isNullable ){
        clrType = clrType.Replace("?","");
        var IsArray = (clrType.IndexOf("[]")>0);
        clrType = clrType.Replace("[]","");      
        string jsType="";
        string defVal = "";

        switch(clrType){
            case "DateTime":
                jsType="Date";
                defVal="new Date()";
                break;
            case "bool":
                jsType="boolean";
                defVal="false";
                break;
            case "float":
            case "int":
            case "long":
            case "short":
            case "decimal":
            case "double":
            case "byte":
                jsType="number";
                defVal="0";
                break;
            case "string":
                jsType="string";
                defVal="''";
                break;            
            default:
                jsType="please_edit_GetJsTypeAndDefaultValue_"+ clrType;
                defVal="''";
                break;
        }
        if(IsArray )
        {
            jsType +="[]";
            defVal ="[]";
        }
        if(isNullable ) {
            jsType +="|null";
            defVal ="null";
        }
        return System.Tuple.Create(jsType ,defVal);
}
#>
