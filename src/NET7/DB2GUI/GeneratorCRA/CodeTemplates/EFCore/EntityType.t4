<#@ output extension=".tsx" #>
<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }
    string nameClass = Options.ContextName + "_"+ EntityType.Name +"_Table";
    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "{ Button , Table } from \"antd\"",
        "{ concatMap, delay, map,Observable,of,scan } from \"rxjs\"",
        "{ajax } from \"rxjs/ajax\"",
        "{ useState } from \"react\"",
        "JsonStreamDecoder from \"../../../Common/asyncEnumerable\""
    };


#>


export class <#=nameClass#> 
{

    constructor(cc: Partial<<#=nameClass#>> | null = null) {
    if (cc != null) {
      // Object.keys(tilt).forEach((key) => {
      //   (this as any)[key] = (tilt as any)[key];
      // });
      Object.assign(this,cc);
    }
    }

<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var isNullable = property.IsNullable && !property.ClrType.IsValueType;
        var clrType=code.Reference(property.ClrType);
        var tv= GetJsTypeAndDefaultValue(clrType,isNullable);
        var jsType= tv.Item1;
        var defVal=tv.Item2;
        
        #>
        public <#= property.Name.ToLower() #> : <#=jsType #>  = <#=defVal#>;
        <#
    } // foreach property 
#>
}
export class <#=nameClass#>_Interaction {
            public getAll():Observable<<#=nameClass#>[]>{
                //var data=ajax.getJSON('http://localhost:5018/AdvancedSearch_<#=Options.ContextName#>_<#= EntityType.Name #>/GetAll')
                //.pipe(
                //    map(response => {        
                //        return response as <#=nameClass#>[];
                //    })
                //  );
                                var data=JsonStreamDecoder.fromFetchStream<<#=nameClass#>>('http://localhost:5018/AdvancedSearch_<#=Options.ContextName#>_<#= EntityType.Name #>/GetAll')                
                .pipe(
                    map(it=>new <#=nameClass#>(it)),                    
                    concatMap((x,index)=>{
                      if((index+1) % 50 === 0)
                      return of(x).pipe(delay(10*1000));
                    else
                      return of(x);
                    }),
                    scan((acc,value)=>[...acc, value], [] as <#=nameClass#>[]),
                    
                  );
                  return data;

            }
         }
export default function TableData_<#= EntityType.Name #>() 
{
    const nameTable = '<#= EntityType.Name #>';
    const nameDB = '<#= Options.ContextName #>';
    const interaction=new <#=nameClass#>_Interaction();
    const [dataTable,setDataTable]= useState<<#=nameClass#>[]|null>(null);
const columns = [
    {
        title: 'ID',
        dataIndex: 'id',
        key: 'id',
        width: '5%',
        render:(item: any, record: any, index: any)=>(<>{index+1}</>)
      }

  <#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var isNullable = property.IsNullable && !property.ClrType.IsValueType;
        var clrType=code.Reference(property.ClrType);
        var tv= GetJsTypeAndDefaultValue(clrType,isNullable);
        var jsType= tv.Item1;
        var defVal=tv.Item2;
        var namePropJS=property.Name.ToLower();
        
#>
   ,{
    title: '<#= property.Name #>',
    dataIndex: '<#= namePropJS #>',
    key: '<#= namePropJS #>',
    sorter: (a:<#=nameClass#>, b:<#=nameClass#>) => 
    {
        if(a.<#= namePropJS #> == null && b.<#= namePropJS #> == null)
            return 0;
        
        if(a.<#= namePropJS #> == null)
            return -1;
        if(b.<#= namePropJS #> == null)
            return 1;
        <# if(jsType == "number" || jsType == "number|null"){ #>
            return a.<#= namePropJS #> - b.<#= namePropJS #>;
        <# } else { #>
        
        return a.<#= namePropJS #>.toString().localeCompare(b.<#= namePropJS #>.toString());
        <#  }// jstype number #>
    }
  } 

<#
    }//end foreach
#>
  
];

    const showAll=()=>{
        setDataTable(null);
        interaction.getAll().subscribe(
            (data)=>{
                setDataTable(data);
            }
        )
    };

    return (
    <>
        Table {nameTable} from DB {nameDB}

        <Button type="primary" onClick={showAll}>List <#= EntityType.Name #></Button>
        <div>
            {dataTable == null && "no data loaded"}
            {dataTable !=null &&             
                <>
                Number rows loaded {dataTable?.length}
  <Table dataSource={dataTable} columns={columns} />;
  </>
            }
        </div>

    </>
    )
}
<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();
    WriteLine("//this was autogenerated by a tool. Do not modify! Use partial");
    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
 import <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
<#+

private System.Tuple<string,string> GetJsTypeAndDefaultValue(string clrType,bool isNullable ){
        clrType = clrType.Replace("?","");
        string jsType="";
        string defVal = "";
        switch(clrType){
            case "int":
            case "long":
                jsType="number";
                defVal="0";
                break;
            default:
                jsType=clrType;
                defVal="''";
                break;
        }

        if(isNullable ) {
            jsType +="|null";
            defVal ="null";
        }
        return System.Tuple.Create(jsType ,defVal);
}
#>