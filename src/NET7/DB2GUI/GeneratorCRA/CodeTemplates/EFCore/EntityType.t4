<#@ output extension=".tsx" #>
<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "{ Button } from \"antd\"",
    };


#>

//ADDED by code generator
export class <#= EntityType.Name #>_Table 
{
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var isNullable = property.IsNullable && !property.ClrType.IsValueType;
        var clrType=code.Reference(property.ClrType);
        clrType = clrType.Replace("?","");
        string jsType="";
        string defVal = "";
        switch(clrType){
            case "int":
            case "long":
                jsType="number";
                defVal="0";
                break;
            default:
                jsType=clrType;
                defVal="''";
                break;
        }

        if(isNullable ) {
            jsType +="|null";
            defVal ="null";
        }
        
        #>
        public <#= property.Name #> : <#=jsType #>  = <#=defVal#>;
        <#
    } // foreach property 
#>
}

export default function <#= EntityType.Name #>_Table_Data() 
{

    const showAll=()=>{alert("showAll")};

    return (
    <>
        Table <#= EntityType.Name #>

        <Button type="primary" onClick={showAll}>List <#= EntityType.Name #></Button>
    </>
}
<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();
    WriteLine("//this was autogenerated by a tool. Do not modify! Use partial");
    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
 import <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
