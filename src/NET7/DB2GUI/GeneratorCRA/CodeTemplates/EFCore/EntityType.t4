<#@ output extension=".tsx" #>
<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="EntityType" type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (EntityType.IsSimpleManyToManyJoinEntityType())
    {
        // Don't scaffold these
        return "";
    }

    var services = (IServiceProvider)Host;
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

    var usings = new List<string>
    {
        "{ Button , Table } from \"antd\"",
        "{ map,Observable } from \"rxjs\"",
        "{ajax } from \"rxjs/ajax\"",
        "{ useState } from \"react\""
    };


#>


export class <#=Options.ContextName#>_<#= EntityType.Name #>_Table 
{
<#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        var isNullable = property.IsNullable && !property.ClrType.IsValueType;
        var clrType=code.Reference(property.ClrType);
        clrType = clrType.Replace("?","");
        string jsType="";
        string defVal = "";
        switch(clrType){
            case "int":
            case "long":
                jsType="number";
                defVal="0";
                break;
            default:
                jsType=clrType;
                defVal="''";
                break;
        }

        if(isNullable ) {
            jsType +="|null";
            defVal ="null";
        }
        
        #>
        public <#= property.Name.ToLower() #> : <#=jsType #>  = <#=defVal#>;
        <#
    } // foreach property 
#>
}
export class <#=Options.ContextName#>_<#= EntityType.Name #>_Table_Interaction {
            public getAll():Observable<<#=Options.ContextName#>_<#= EntityType.Name #>_Table[]>{
                // var data= fromFetch('http://localhost:5018/MetaData/DBNames')
                var data=ajax.getJSON('http://localhost:5018/AdvancedSearch_<#=Options.ContextName#>_<#= EntityType.Name #>/GetAll')
                .pipe(
                    map(response => {
        
                        return response as <#=Options.ContextName#>_<#= EntityType.Name #>_Table[];
                    })
                    //takeUntil(cancel)
                  );
                  return data;
            }
         }
export default function TableData_<#= EntityType.Name #>() 
{
    const nameTable = '<#= EntityType.Name #>';
    const nameDB = '<#= Options.ContextName #>';
    const interaction=new <#=Options.ContextName#>_<#= EntityType.Name #>_Table_Interaction();
    const [dataTable,setDataTable]= useState<<#=Options.ContextName#>_<#= EntityType.Name #>_Table[]|null>(null);
const columns = [
    {
        title: 'ID',
        dataIndex: 'id',
        key: 'id',
        width: '5%',
        render:(item: any, record: any, index: any)=>(<>{index+1}</>)
      }

  <#
    foreach (var property in EntityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
    {
        
#>
   ,{
    title: '<#= property.Name.ToLower() #>',
    dataIndex: '<#= property.Name.ToLower() #>',
    key: '<#= property.Name.ToLower() #>',
    sorter: (a:<#=Options.ContextName#>_<#= EntityType.Name #>_Table, b:<#=Options.ContextName#>_<#= EntityType.Name #>_Table) => 
    {
    //TODO: make for number
        if(a.<#= property.Name.ToLower() #> == null && b.<#= property.Name.ToLower() #> == null)
            return 0;
        
        if(a.<#= property.Name.ToLower() #> == null)
            return -1;
        if(b.<#= property.Name.ToLower() #> == null)
            return 1;
        
        return a.<#= property.Name.ToLower() #>.toString().localeCompare(b.<#= property.Name.ToLower() #>.toString());

    }
  } 

<#
    }//end foreach
#>
  
];

    const showAll=()=>{
        setDataTable(null);
        interaction.getAll().subscribe(
            (data)=>{
                setDataTable(data);
            }
        )
    };

    return (
    <>
        Table {nameTable} from DB {nameDB}

        <Button type="primary" onClick={showAll}>List <#= EntityType.Name #></Button>
        <div>
            {dataTable == null && "no data loaded"}
            {dataTable !=null &&             
                <>
                Number rows loaded {dataTable?.length}
  <Table dataSource={dataTable} columns={columns} />;
  </>
            }
        </div>

    </>
    )
}
<#
    var previousOutput = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();
    WriteLine("//this was autogenerated by a tool. Do not modify! Use partial");
    foreach (var ns in usings.Distinct().OrderBy(x => x, new NamespaceComparer()))
    {
#>
 import <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(previousOutput);
#>
